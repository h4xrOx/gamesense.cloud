# Sample workflow for building and deploying a Nuxt site to GitHub Pages
#
# To get started with Nuxt see: https://nuxtjs.org/docs/get-started/installation
#
name: Deploy Nuxt site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "16"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Setup Pages
        uses: actions/configure-pages@v3
        with:
          # Automatically inject router.base in your Nuxt configuration file and set
          # target to static (https://nuxtjs.org/docs/configuration-glossary/configuration-target/).
          #
          # You may remove this line if you want to manage the configuration yourself.
          static_site_generator: nuxt
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            dist
            .nuxt
          key: ${{ runner.os }}-nuxt-build-${{ hashFiles('dist') }}
          restore-keys: |
            ${{ runner.os }}-nuxt-build-
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Static HTML export with Nuxt
        run: ${{ steps.detect-package-manager.outputs.manager }} run generate
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: ./dist

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
      - name: Setup Node.js environment    
  {
  "name": "cdnjs.dev",
  "version": "1.0.0",
  "description": "The new cdnjs website, using Vue & Nuxt",
  "private": true,
  "main": "index.js",
  "engines": {
    "node": "12.16.2"
  },
  "scripts": {
    "dev": "NODE_ENV=dev SITE_HOST=http://localhost:3000/ nuxt",
    "dev:analyze": "NODE_ENV=production SITE_HOST=http://localhost:3000/ nuxt build --analyze",
    "build": "NODE_ENV=production nuxt build",
    "start": "NODE_ENV=production node server/app.js",
    "test": "npm run test:eslint && npm run test:scss",
    "test:fix": "npm run test:eslint:fix && npm run test:scss:fix",
    "test:eslint": "eslint --ext .js,.vue --ignore-path .gitignore .",
    "test:eslint:fix": "npm run test:eslint -- --fix",
    "test:scss": "sass-lint '!(node_modules|.nuxt|dist)/**/*.scss' --verbose --no-exit --config .sasslintrc",
    "test:scss:fix": "sass-lint-auto-fix '!(node_modules|.nuxt|dist)/**/*.scss'"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/cdnjs/static-website.git"
  },
  "author": "cdnjs",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/cdnjs/static-website/issues"
  },
  "homepage": "https://github.com/cdnjs/static-website#readme",
  "dependencies": {
    "@fortawesome/fontawesome-free": "^5.14.0",
    "@nuxtjs/google-analytics": "^2.4.0",
    "@nuxtjs/sentry": "^4.3.5",
    "@nuxtjs/svg": "^0.1.12",
    "@sentry/node": "^5.24.2",
    "algoliasearch": "^4.5.1",
    "babel-polyfill": "^6.26.0",
    "chunk": "0.0.3",
    "consola": "^2.15.0",
    "copyfiles": "^2.3.0",
    "esm": "^3.2.25",
    "express": "^4.17.1",
    "fontmin": "^0.9.8",
    "glob-to-regexp": "^0.4.1",
    "imagemin": "^7.0.1",
    "imagemin-jpegtran": "^7.0.0",
    "imagemin-optipng": "^8.0.0",
    "imagemin-svgo": "^8.0.0",
    "instantsearch.css": "^7.4.5",
    "markdown-it": "^11.0.1",
    "morgan": "^1.10.0",
    "node-fetch": "^2.6.1",
    "nuxt": "^2.14.5",
    "prismjs": "^1.21.0",
    "semver-sort": "0.0.4",
    "sitemap": "^6.3.0",
    "spdx-license-ids": "^3.0.6",
    "thenby": "^1.3.4",
    "tlite": "^0.1.9",
    "typeface-ubuntu": "0.0.65",
    "url-parse": "^1.4.7",
    "vue": "^2.6.12",
    "vue-client-only": "^2.0.0",
    "vue-clipboard2": "^0.3.1",
    "vue-gravatar": "^1.3.1",
    "vue-hot-reload-api": "^2.3.4",
    "vue-instantsearch": "^3.2.0",
    "vue-prism-component": "^1.2.0",
    "vue-router": "^3.4.3",
    "vue-select": "^3.10.8"
  },
  "devDependencies": {
    "@babel/runtime-corejs3": "^7.11.2",
    "@nuxtjs/eslint-config": "^3.1.0",
    "@sentry/cli": "^1.57.0",
    "babel-eslint": "^10.1.0",
    "core-js": "^3.6.5",
    "eslint": "^7.9.0",
    "eslint-plugin-nuxt": "^1.0.0",
    "eslint-plugin-vue": "^6.2.2",
    "node-sass": "^4.14.1",
    "nodemon": "^2.0.4",
    "sass-lint": "^1.13.1",
    "sass-lint-auto-fix": "^0.21.2",
    "sass-loader": "^10.0.2",
    "vue-eslint-parser": "^7.1.0"
  }
}
